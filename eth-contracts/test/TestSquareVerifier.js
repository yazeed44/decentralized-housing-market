// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

// Test verification with incorrect proof

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");
const zokratesProof = require("../../zokrates/code/square/proof.json");

// - use the contents from proof.json generated from zokrates steps
contract("Test Verifier", (accounts) => {
    const accountOne = accounts[0];
    let contract;
    // Test verification with correct proof
    beforeEach(async function () {
        contract = await Verifier.new({ from: accountOne });
    });

    it("Correct proof produces true", async function () {
        const result = await contract.verifyTx.call(zokratesProof.proof, zokratesProof.inputs);
        assert.equal(result, true, "proof is invalid");
    });

    it("Correct proof produces false", async function () {
        const faultyInputs = [
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
        ];
        const result = await contract.verifyTx.call(zokratesProof.proof, faultyInputs);
        assert.equal(result, false, "Faulty input should produce false");
    });
});
